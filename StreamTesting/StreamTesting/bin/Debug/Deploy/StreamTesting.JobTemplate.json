{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ASAApiVersion": {
      "type": "string"
    },
    "StreamAnalyticsJobName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 63,
      "metadata": {
        "description": "Stream Analytics Job Name, can contain alphanumeric characters and hypen and must be 3-63 characters long"
      }
    },
    "Location": {
      "type": "string"
    },
    "OutputStartMode": {
      "type": "string",
      "allowedValues": [
        "JobStartTime",
        "CustomTime",
        "LastOutputEventTime"
      ]
    },
    "OutputStartTime": {
      "type": "string"
    },
    "DataLocale": {
      "type": "string"
    },
    "OutputErrorPolicy": {
      "type": "string",
      "allowedValues": [
        "Drop",
        "Stop"
      ]
    },
    "EventsLateArrivalMaxDelayInSeconds": {
      "type": "int"
    },
    "EventsOutOfOrderMaxDelayInSeconds": {
      "type": "int"
    },
    "EventsOutOfOrderPolicy": {
      "type": "string",
      "allowedValues": [
        "Adjust",
        "Drop"
      ]
    },
    "StreamingUnits": {
      "type": "int",
      "minValue": 1,
      "maxValue": 120,
      "metadata": {
        "description": "Number of Streaming Units"
      },
      "allowedValues": [
        1,
        3,
        6,
        12,
        18,
        24,
        30,
        36,
        42,
        48,
        54,
        60,
        66,
        72,
        78,
        84,
        90,
        96,
        102,
        108,
        114,
        120
      ]
    },
    "CompatibilityLevel": {
      "type": "string",
      "allowedValues": [
        "1.0",
        "1.1",
        "1.2"
      ]
    }
  },
  "resources": [
    {
      "type": "Microsoft.StreamAnalytics/StreamingJobs",
      "apiVersion": "[parameters('ASAApiVersion')]",
      "name": "[parameters('StreamAnalyticsJobName')]",
      "location": "[parameters('Location')]",
      "properties": {
        "outputStartMode": "[parameters('OutputStartMode')]",
        "outputStartTime": "[if(equals(parameters('OutputStartMode'),'CustomTime'), parameters('OutputStartTime'), json('null'))]",
        "sku": {
          "name": "standard"
        },
        "jobType": "Cloud",
        "eventsOutOfOrderPolicy": "[parameters('EventsOutOfOrderPolicy')]",
        "outputErrorPolicy": "[parameters('OutputErrorPolicy')]",
        "eventsOutOfOrderMaxDelayInSeconds": "[parameters('EventsOutOfOrderMaxDelayInSeconds')]",
        "eventsLateArrivalMaxDelayInSeconds": "[parameters('EventsLateArrivalMaxDelayInSeconds')]",
        "dataLocale": "[parameters('DataLocale')]",
        "compatibilityLevel": "[parameters('CompatibilityLevel')]",
        "inputs": [],
        "outputs": [],
        "transformation": {
          "name": "Transformation",
          "properties": {
            "streamingUnits": "[parameters('StreamingUnits')]",
            "query": " /*\r\nSELECT\r\n        TopOne() OVER (ORDER BY SessionDate) AS firstEvent\r\n    FROM\r\n        testsessions TIMESTAMP BY SessionDate\r\n    GROUP BY SLIDINGWINDOW(minute,30)\r\n*/\r\n\r\nWITH CTE_Sessions AS\r\n(\r\nSELECT \r\n    s.SessionID\r\n    ,s.SessionDate AS EventDate\r\n    ,s.VisitID\r\n    ,s.utm\r\n    ,'s' AS EventType\r\n--,     ISFIRST(mi, 30) OVER (PARTITION BY VisitID) as first  --based on tumbling window so doesn't help\r\nFROM\r\n    testsessions s TIMESTAMP BY SessionDate \r\n),\r\nCTE_Events AS \r\n(\r\nSELECT \r\n    SessionID\r\n    , EventDate\r\n    , 'e' AS EventType\r\nFROM\r\n    testevents TIMESTAMP BY EventDate \r\nUNION ALL\r\nSELECT \r\n    SessionID\r\n    , EventDate\r\n    , EventType\r\nFROM\r\n    CTE_Sessions\r\n)\r\n, CTE_SessionInfo as \r\n(\r\nSELECT  s.SessionID,\r\n        s.VisitID,\r\n        s.utm,\r\n        LAG(s.UTM, 1) OVER (PARTITION By s.VisitID LIMIT DURATION(minute, 30)) AS PreviousUTM,\r\n        LAG(s.SessionID,1) OVER (PARTITION By s.VisitID LIMIT DURATION(minute, 30)) AS PreviousSessionID,\r\n        e.EventDate,\r\n        e.EventType\r\nFROM    CTE_Sessions s \r\nJOIN    cte_events e    \r\n        ON DATEDIFF(MINUTE,s,e) BETWEEN 0 AND 30 --1 DAY\r\n        AND s.SessionID = e.SessionID\r\n)\r\n, CTE_ALL AS \r\n(\r\nSELECT\r\n        s.SessionID,\r\n        s.VisitID,\r\n        CASE WHEN s.PreviousUTM <> s.utm OR s.PreviousSessionID IS NULL THEN 1 ELSE 0 END AS IsNewVisit,\r\n        s.EventType, EventDate\r\nFROM    CTE_SessionInfo s\r\n)\r\n/*, CTE_NEW AS \r\n(\r\nSELECT\r\n        a.SessionID,\r\n        a.VisitID, EventDate,a.IsNewVisit\r\nFROM    CTE_ALL a\r\nWHERE   a.IsNewVisit = 1\r\n)*/\r\n\r\nSELECT \r\n    LAST(a.SessionID) OVER (PARTITION BY VisitID LIMIT DURATION(MINUTE, 60) WHEN  a.IsNewVisit = 1)    AS ConfusedVisitID --needs to be wide enough window to find earliest visit...\r\n    --, n.EventDate AS ConfusedVisitStartDate\r\n    , A.SessionID AS SessionID\r\n    --, a.IsNewVisit\r\n    --, a.EventDate AS SessionDate\r\n    --, a.VisitID\r\n,udf.GetString('http://poo.domain.com?utm_medium=poo2&')\r\nFROM CTE_ALL  A\r\n/*JOIN CTE_NEW n --should we left outer her if want to include things with start over a day ago??\r\n    ON DATEDIFF(MINUTE,N,A) BETWEEN 0 AND 1440 --1 DAY\r\n    AND a.VisitID = n.VisitID*/\r\nWHERE   --a.IsNewVisit = 0\r\n    --AND \r\na.EventType = 's'\r\n\r\n/*\r\nUNION \r\n\r\nSELECT  \r\n    a.SessionID AS ConfusedVisitID\r\n    , a.eventdate AS ConfusedVisitStartDate\r\n    , A.SessionID\r\n    , a.IsNewVisit\r\n    , a.EventDate AS SessionDate\r\nFROM CTE_NEW a\r\n*/\r\n\r\n\r\n/*with cte AS\r\n(\r\n    SELECT\r\n        SessionID,\r\n        VisitID,\r\n        utm,\r\n        --LicensePlate AS CurrentCarLicensePlate,\r\n        lag(VisitID,1) OVER (PARTITION By VisitID LIMIT DURATION(minute, 30)) AS PrevVisitID,\r\n        lag(SessionID,1) OVER (PARTITION By VisitID LIMIT DURATION(minute, 30)) AS PrevSessionID,\r\n        --ISFIRST(mi, 30) OVER (PARTITION BY VisitID)  ,\r\n       -- ISFIRST(mi, 10) OVER (PARTITION BY visitid) as IsFirstSessionID,\r\n        LAG(UTM, 1) OVER (PARTITION By VisitID LIMIT DURATION(minute, 30)) AS PreviousUTM,\r\n        LAG(EventDate, 1) OVER (LIMIT DURATION(minute, 30)) AS PreviousSessionDate,\r\n       LAST(SessionID) OVER (PARTITION BY VisitID LIMIT DURATION(minute, 30)) AS LastSessionID\r\n,EventDate\r\n    FROM\r\n        test2 TIMESTAMP BY EventDate\r\n), cte1 AS\r\n(\r\n    SELECT\r\n        SessionID,\r\n        VisitID,\r\n        utm,\r\n        --LicensePlate AS CurrentCarLicensePlate,\r\n        lag(VisitID,1) OVER (PARTITION By VisitID LIMIT DURATION(minute, 30)) AS PrevVisitID,\r\n        lag(SessionID,1) OVER (PARTITION By VisitID LIMIT DURATION(minute, 30)) AS PrevSessionID,\r\n        --ISFIRST(mi, 30) OVER (PARTITION BY VisitID)  ,\r\n       -- ISFIRST(mi, 10) OVER (PARTITION BY visitid) as IsFirstSessionID,\r\n        LAG(UTM, 1) OVER (partition by VisitID LIMIT DURATION(minute, 30)) AS PreviousUTM,\r\n        LAG(EventDate, 1) OVER (LIMIT DURATION(minute, 30)) AS PreviousSessionDate,\r\n       LAST(SessionID) OVER (PARTITION BY VisitID LIMIT DURATION(minute, 30)) AS LastSessionID\r\n,EventDate\r\n    FROM\r\n        test2 TIMESTAMP BY EventDate\r\n)\r\n\r\n\r\nSELECT *,\r\ncase when PreviousUTM <> UTM then VisitID ELSE\r\ncoalesce(PrevVisitID, VisitID ) END AS ConfusedVisitID\r\n FROM CTE C\r\n\r\n\r\n\r\nSELECT C.*,\r\nc1.MinSessionID\r\n--coalesce(PrevSessionID, SessionID) AS ConfusedVisitID\r\n FROM CTE C\r\nLEFT OUTER JOIN (SELECT VisitID, min(sessionid) AS MinSessionID \r\nFROM CTE1\r\nGROUP BY        sessionwindow(minute, 30,60) OVER (PARTITION BY VisitID), VisitID) C1 on\r\n\r\nc.PrevVisitID = c1.VisitID\r\nAND DATEDIFF(minute,C,C1) BETWEEN 0 AND 30\r\n\r\n--ORDER BY C.EVENTDATE\r\n*/\r\n\r\n/*\r\n    WITH LastInWindow AS\r\n    (\r\n        SELECT \r\nVisitID,\r\n            MAX(EventDate) AS LastEventTime\r\n        FROM \r\n            test2 TIMESTAMP BY EventDate\r\n        GROUP BY \r\n            sessionwindow(minute, 30,60) OVER (PARTITION BY VisitID), VisitID\r\n    )\r\n    SELECT \r\n        test2.visitid,\r\n        test2.EventDate\r\n    FROM\r\n        test2 TIMESTAMP BY EventDate \r\n        INNER JOIN LastInWindow\r\n        ON DATEDIFF(minute, test2, LastInWindow) BETWEEN 0 AND 30\r\n        AND test2.EventDate = LastInWindow.LastEventTime\r\nAND test2.VisitID = LastInWindow.VisitID\r\n*/"
          }
        },
        "functions": [
          {
            "name": "GetString",
            "properties": {
              "type": "Scalar",
              "properties": {
                "inputs": [
                  {
                    "dataType": "any"
                  }
                ],
                "output": {
                  "dataType": "any"
                },
                "binding": {
                  "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                  "properties": {
                    "script": "// Sample UDF which returns sum of two values.\r\nfunction GetString(arg1) {\r\n    \r\n    var obj = { prop: \"\" };\r\n\r\n    //obj.prop = (/[^.]+/.exec(arg1)[0]);\r\n\r\n    obj.prop = (/utm_medium=.*[?&]/.exec(arg1)[0]);\r\n\r\n   // var url = 'http://xxx.domain.com';\r\n   // obj.prop = (/[^.]+/.exec(url)[0]);\r\n    //obj.prop = (/[^.]+/.exec(url)[0].substr(7));\r\n    \r\n    return obj\r\n}\r\n\r\n\r\n"
                  }
                }
              }
            }
          }
        ]
      }
    }
  ]
}